// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Cloudmersive
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for Face.
    /// </summary>
    public static partial class FaceExtensions
    {
            /// <summary>
            /// Find faces in an image
            /// </summary>
            /// Locate the positions of all faces in an image
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='imageFile'>
            /// Image file to perform the operation on.  Common file formats such as PNG,
            /// JPEG are supported.
            /// </param>
            public static LocateOKResponse Locate(this IFace operations, System.IO.Stream imageFile)
            {
                return Task.Factory.StartNew(s => ((IFace)s).LocateAsync(imageFile), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Find faces in an image
            /// </summary>
            /// Locate the positions of all faces in an image
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='imageFile'>
            /// Image file to perform the operation on.  Common file formats such as PNG,
            /// JPEG are supported.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LocateOKResponse> LocateAsync(this IFace operations, System.IO.Stream imageFile, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.LocateWithHttpMessagesAsync(imageFile, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Crop image to face (square)
            /// </summary>
            /// Crop an image to the face (rectangular crop).  If there is more than one
            /// face present, choose the first one.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='imageFile'>
            /// Image file to perform the operation on.  Common file formats such as PNG,
            /// JPEG are supported.
            /// </param>
            public static System.IO.Stream CropFirst(this IFace operations, System.IO.Stream imageFile)
            {
                return Task.Factory.StartNew(s => ((IFace)s).CropFirstAsync(imageFile), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Crop image to face (square)
            /// </summary>
            /// Crop an image to the face (rectangular crop).  If there is more than one
            /// face present, choose the first one.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='imageFile'>
            /// Image file to perform the operation on.  Common file formats such as PNG,
            /// JPEG are supported.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<System.IO.Stream> CropFirstAsync(this IFace operations, System.IO.Stream imageFile, CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.CropFirstWithHttpMessagesAsync(imageFile, null, cancellationToken).ConfigureAwait(false);
                _result.Request.Dispose();
                return _result.Body;
            }

            /// <summary>
            /// Crop image to face (round)
            /// </summary>
            /// Crop an image to the face (circular/round crop).  If there is more than
            /// one face present, choose the first one.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='imageFile'>
            /// Image file to perform the operation on.  Common file formats such as PNG,
            /// JPEG are supported.
            /// </param>
            public static System.IO.Stream CropFirstRound(this IFace operations, System.IO.Stream imageFile)
            {
                return Task.Factory.StartNew(s => ((IFace)s).CropFirstRoundAsync(imageFile), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Crop image to face (round)
            /// </summary>
            /// Crop an image to the face (circular/round crop).  If there is more than
            /// one face present, choose the first one.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='imageFile'>
            /// Image file to perform the operation on.  Common file formats such as PNG,
            /// JPEG are supported.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<System.IO.Stream> CropFirstRoundAsync(this IFace operations, System.IO.Stream imageFile, CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.CropFirstRoundWithHttpMessagesAsync(imageFile, null, cancellationToken).ConfigureAwait(false);
                _result.Request.Dispose();
                return _result.Body;
            }

    }
}
