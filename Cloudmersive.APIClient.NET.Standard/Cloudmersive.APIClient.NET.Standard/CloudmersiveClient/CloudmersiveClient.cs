// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Cloudmersive
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using System.Diagnostics;
    using System.Net;
    using System.Net.Http;
    using System.Net.Http.Headers;
    using System.Text;
    using System.Text.RegularExpressions;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using Models;

    public partial class CloudmersiveClient : ServiceClient<CloudmersiveClient>, ICloudmersiveClient
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        public Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        public JsonSerializerSettings SerializationSettings { get; private set; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        public JsonSerializerSettings DeserializationSettings { get; private set; }        

        /// <summary>
        /// Subscription credentials which uniquely identify client subscription.
        /// </summary>
        public ServiceClientCredentials Credentials { get; private set; }

        /// <summary>
        /// Gets the IDomain.
        /// </summary>
        public virtual IDomain Domain { get; private set; }

        /// <summary>
        /// Gets the IEmail.
        /// </summary>
        public virtual IEmail Email { get; private set; }

        /// <summary>
        /// Gets the IIPAddress.
        /// </summary>
        public virtual IIPAddress IPAddress { get; private set; }

        /// <summary>
        /// Gets the IExtractEntitiesString.
        /// </summary>
        public virtual IExtractEntitiesString ExtractEntitiesString { get; private set; }

        /// <summary>
        /// Gets the ILanguageDetection.
        /// </summary>
        public virtual ILanguageDetection LanguageDetection { get; private set; }

        /// <summary>
        /// Gets the IParseString.
        /// </summary>
        public virtual IParseString ParseString { get; private set; }

        /// <summary>
        /// Gets the IPosTaggerJson.
        /// </summary>
        public virtual IPosTaggerJson PosTaggerJson { get; private set; }

        /// <summary>
        /// Gets the IPosTaggerString.
        /// </summary>
        public virtual IPosTaggerString PosTaggerString { get; private set; }

        /// <summary>
        /// Gets the ISentences.
        /// </summary>
        public virtual ISentences Sentences { get; private set; }

        /// <summary>
        /// Gets the ISpellCheck.
        /// </summary>
        public virtual ISpellCheck SpellCheck { get; private set; }

        /// <summary>
        /// Gets the IWords.
        /// </summary>
        public virtual IWords Words { get; private set; }

        /// <summary>
        /// Gets the IImageOcr.
        /// </summary>
        public virtual IImageOcr ImageOcr { get; private set; }

        /// <summary>
        /// Gets the IBarcodeLookup.
        /// </summary>
        public virtual IBarcodeLookup BarcodeLookup { get; private set; }

        /// <summary>
        /// Gets the IGenerateBarcode.
        /// </summary>
        public virtual IGenerateBarcode GenerateBarcode { get; private set; }

        /// <summary>
        /// Gets the IFace.
        /// </summary>
        public virtual IFace Face { get; private set; }

        /// <summary>
        /// Gets the INsfw.
        /// </summary>
        public virtual INsfw Nsfw { get; private set; }

        /// <summary>
        /// Gets the IRecognize.
        /// </summary>
        public virtual IRecognize Recognize { get; private set; }

        /// <summary>
        /// Gets the IResize.
        /// </summary>
        public virtual IResize Resize { get; private set; }

        /// <summary>
        /// Gets the IConvertData.
        /// </summary>
        public virtual IConvertData ConvertData { get; private set; }

        /// <summary>
        /// Gets the IConvertDocument.
        /// </summary>
        public virtual IConvertDocument ConvertDocument { get; private set; }

        /// <summary>
        /// Gets the IConvertImage.
        /// </summary>
        public virtual IConvertImage ConvertImage { get; private set; }

        /// <summary>
        /// Gets the IConvertTemplate.
        /// </summary>
        public virtual IConvertTemplate ConvertTemplate { get; private set; }

        /// <summary>
        /// Gets the IConvertWeb.
        /// </summary>
        public virtual IConvertWeb ConvertWeb { get; private set; }

        /// <summary>
        /// Gets the IScan.
        /// </summary>
        public virtual IScan Scan { get; private set; }

        /// <summary>
        /// Initializes a new instance of the CloudmersiveClient class.
        /// </summary>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        protected CloudmersiveClient(params DelegatingHandler[] handlers) : base(handlers)
        {
            this.Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the CloudmersiveClient class.
        /// </summary>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        protected CloudmersiveClient(HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : base(rootHandler, handlers)
        {
            this.Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the CloudmersiveClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        protected CloudmersiveClient(Uri baseUri, params DelegatingHandler[] handlers) : this(handlers)
        {
            if (baseUri == null)
            {
                throw new ArgumentNullException("baseUri");
            }
            this.BaseUri = baseUri;
        }

        /// <summary>
        /// Initializes a new instance of the CloudmersiveClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        protected CloudmersiveClient(Uri baseUri, HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (baseUri == null)
            {
                throw new ArgumentNullException("baseUri");
            }
            this.BaseUri = baseUri;
        }

        /// <summary>
        /// Initializes a new instance of the CloudmersiveClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Subscription credentials which uniquely identify client subscription.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        public CloudmersiveClient(ServiceClientCredentials credentials, params DelegatingHandler[] handlers) : this(handlers)
        {
            if (credentials == null)
            {
                throw new ArgumentNullException("credentials");
            }
            this.Credentials = credentials;
            if (this.Credentials != null)
            {
                this.Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// Initializes a new instance of the CloudmersiveClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Subscription credentials which uniquely identify client subscription.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        public CloudmersiveClient(ServiceClientCredentials credentials, HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (credentials == null)
            {
                throw new ArgumentNullException("credentials");
            }
            this.Credentials = credentials;
            if (this.Credentials != null)
            {
                this.Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// Initializes a new instance of the CloudmersiveClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='credentials'>
        /// Required. Subscription credentials which uniquely identify client subscription.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        public CloudmersiveClient(Uri baseUri, ServiceClientCredentials credentials, params DelegatingHandler[] handlers) : this(handlers)
        {
            if (baseUri == null)
            {
                throw new ArgumentNullException("baseUri");
            }
            if (credentials == null)
            {
                throw new ArgumentNullException("credentials");
            }
            this.BaseUri = baseUri;
            this.Credentials = credentials;
            if (this.Credentials != null)
            {
                this.Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// Initializes a new instance of the CloudmersiveClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='credentials'>
        /// Required. Subscription credentials which uniquely identify client subscription.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        public CloudmersiveClient(Uri baseUri, ServiceClientCredentials credentials, HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (baseUri == null)
            {
                throw new ArgumentNullException("baseUri");
            }
            if (credentials == null)
            {
                throw new ArgumentNullException("credentials");
            }
            this.BaseUri = baseUri;
            this.Credentials = credentials;
            if (this.Credentials != null)
            {
                this.Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// An optional partial-method to perform custom initialization.
        ///</summary> 
        partial void CustomInitialize();
        /// <summary>
        /// Initializes client properties.
        /// </summary>
        private void Initialize()
        {
            this.Domain = new Domain(this);
            this.Email = new Email(this);
            this.IPAddress = new IPAddress(this);
            this.ExtractEntitiesString = new ExtractEntitiesString(this);
            this.LanguageDetection = new LanguageDetection(this);
            this.ParseString = new ParseString(this);
            this.PosTaggerJson = new PosTaggerJson(this);
            this.PosTaggerString = new PosTaggerString(this);
            this.Sentences = new Sentences(this);
            this.SpellCheck = new SpellCheck(this);
            this.Words = new Words(this);
            this.ImageOcr = new ImageOcr(this);
            this.BarcodeLookup = new BarcodeLookup(this);
            this.GenerateBarcode = new GenerateBarcode(this);
            this.Face = new Face(this);
            this.Nsfw = new Nsfw(this);
            this.Recognize = new Recognize(this);
            this.Resize = new Resize(this);
            this.ConvertData = new ConvertData(this);
            this.ConvertDocument = new ConvertDocument(this);
            this.ConvertImage = new ConvertImage(this);
            this.ConvertTemplate = new ConvertTemplate(this);
            this.ConvertWeb = new ConvertWeb(this);
            this.Scan = new Scan(this);
            this.BaseUri = new Uri("https://api.cloudmersive.com");
            SerializationSettings = new JsonSerializerSettings
            {
                Formatting = Formatting.Indented,
                DateFormatHandling = DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = DateTimeZoneHandling.Utc,
                NullValueHandling = NullValueHandling.Ignore,
                ReferenceLoopHandling = ReferenceLoopHandling.Serialize,
                ContractResolver = new ReadOnlyJsonContractResolver(),
                Converters = new List<JsonConverter>
                    {
                        new Iso8601TimeSpanConverter()
                    }
            };
            DeserializationSettings = new JsonSerializerSettings
            {
                DateFormatHandling = DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = DateTimeZoneHandling.Utc,
                NullValueHandling = NullValueHandling.Ignore,
                ReferenceLoopHandling = ReferenceLoopHandling.Serialize,
                ContractResolver = new ReadOnlyJsonContractResolver(),
                Converters = new List<JsonConverter>
                    {
                        new Iso8601TimeSpanConverter()
                    }
            };
            CustomInitialize();
        }    
    }
}
