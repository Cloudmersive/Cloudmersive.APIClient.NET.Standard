// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Cloudmersive
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for ConvertDocument.
    /// </summary>
    public static partial class ConvertDocumentExtensions
    {
            /// <summary>
            /// Word DOCX to PDF
            /// </summary>
            /// Convert Office Word Documents (docx) to standard PDF
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='inputFile'>
            /// Input file to perform the operation on.
            /// </param>
            public static System.IO.Stream DocxToPdf(this IConvertDocument operations, System.IO.Stream inputFile)
            {
                return Task.Factory.StartNew(s => ((IConvertDocument)s).DocxToPdfAsync(inputFile), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Word DOCX to PDF
            /// </summary>
            /// Convert Office Word Documents (docx) to standard PDF
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='inputFile'>
            /// Input file to perform the operation on.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<System.IO.Stream> DocxToPdfAsync(this IConvertDocument operations, System.IO.Stream inputFile, CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.DocxToPdfWithHttpMessagesAsync(inputFile, null, cancellationToken).ConfigureAwait(false);
                _result.Request.Dispose();
                return _result.Body;
            }

            /// <summary>
            /// PowerPoint PPTX to PDF
            /// </summary>
            /// Convert Office PowerPoint Documents (pptx) to standard PDF
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='inputFile'>
            /// Input file to perform the operation on.
            /// </param>
            public static System.IO.Stream PptxToPdf(this IConvertDocument operations, System.IO.Stream inputFile)
            {
                return Task.Factory.StartNew(s => ((IConvertDocument)s).PptxToPdfAsync(inputFile), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// PowerPoint PPTX to PDF
            /// </summary>
            /// Convert Office PowerPoint Documents (pptx) to standard PDF
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='inputFile'>
            /// Input file to perform the operation on.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<System.IO.Stream> PptxToPdfAsync(this IConvertDocument operations, System.IO.Stream inputFile, CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.PptxToPdfWithHttpMessagesAsync(inputFile, null, cancellationToken).ConfigureAwait(false);
                _result.Request.Dispose();
                return _result.Body;
            }

            /// <summary>
            /// Excel XLSX to PDF
            /// </summary>
            /// Convert Office Excel Workbooks (xlsx) to standard PDF.  Converts all
            /// worksheets in the workbook to PDF.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='inputFile'>
            /// Input file to perform the operation on.
            /// </param>
            public static System.IO.Stream XlsxToPdf(this IConvertDocument operations, System.IO.Stream inputFile)
            {
                return Task.Factory.StartNew(s => ((IConvertDocument)s).XlsxToPdfAsync(inputFile), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Excel XLSX to PDF
            /// </summary>
            /// Convert Office Excel Workbooks (xlsx) to standard PDF.  Converts all
            /// worksheets in the workbook to PDF.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='inputFile'>
            /// Input file to perform the operation on.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<System.IO.Stream> XlsxToPdfAsync(this IConvertDocument operations, System.IO.Stream inputFile, CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.XlsxToPdfWithHttpMessagesAsync(inputFile, null, cancellationToken).ConfigureAwait(false);
                _result.Request.Dispose();
                return _result.Body;
            }

            /// <summary>
            /// Excel XLSX to CSV
            /// </summary>
            /// Convert Office Excel Workbooks (xlsx) to standard Comma-Separated Values
            /// (CSV) format.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='inputFile'>
            /// Input file to perform the operation on.
            /// </param>
            public static System.IO.Stream XlsxToCsv(this IConvertDocument operations, System.IO.Stream inputFile)
            {
                return Task.Factory.StartNew(s => ((IConvertDocument)s).XlsxToCsvAsync(inputFile), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Excel XLSX to CSV
            /// </summary>
            /// Convert Office Excel Workbooks (xlsx) to standard Comma-Separated Values
            /// (CSV) format.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='inputFile'>
            /// Input file to perform the operation on.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<System.IO.Stream> XlsxToCsvAsync(this IConvertDocument operations, System.IO.Stream inputFile, CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.XlsxToCsvWithHttpMessagesAsync(inputFile, null, cancellationToken).ConfigureAwait(false);
                _result.Request.Dispose();
                return _result.Body;
            }

            /// <summary>
            /// Convert Document to PDF
            /// </summary>
            /// Automatically detect file type and convert it to PDF.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='inputFile'>
            /// Input file to perform the operation on.
            /// </param>
            public static System.IO.Stream AutodetectToPdf(this IConvertDocument operations, System.IO.Stream inputFile)
            {
                return Task.Factory.StartNew(s => ((IConvertDocument)s).AutodetectToPdfAsync(inputFile), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Convert Document to PDF
            /// </summary>
            /// Automatically detect file type and convert it to PDF.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='inputFile'>
            /// Input file to perform the operation on.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<System.IO.Stream> AutodetectToPdfAsync(this IConvertDocument operations, System.IO.Stream inputFile, CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.AutodetectToPdfWithHttpMessagesAsync(inputFile, null, cancellationToken).ConfigureAwait(false);
                _result.Request.Dispose();
                return _result.Body;
            }

    }
}
