// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Cloudmersive
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for GenerateBarcode.
    /// </summary>
    public static partial class GenerateBarcodeExtensions
    {
            /// <summary>
            /// Generate a QR code barcode as a PNG file, a type of 2D barcode which can
            /// encode free-form text information
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='value'>
            /// QR code text to convert into the QR code barcode
            /// </param>
            public static System.IO.Stream QRCode(this IGenerateBarcode operations, string value)
            {
                return Task.Factory.StartNew(s => ((IGenerateBarcode)s).QRCodeAsync(value), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Generate a QR code barcode as a PNG file, a type of 2D barcode which can
            /// encode free-form text information
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='value'>
            /// QR code text to convert into the QR code barcode
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<System.IO.Stream> QRCodeAsync(this IGenerateBarcode operations, string value, CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.QRCodeWithHttpMessagesAsync(value, null, cancellationToken).ConfigureAwait(false);
                _result.Request.Dispose();
                return _result.Body;
            }

            /// <summary>
            /// Validate and generate a UPC-A barcode as a PNG file, a type of 1D barcode
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='value'>
            /// UPC-A barcode value to generate from
            /// </param>
            public static System.IO.Stream UPCA(this IGenerateBarcode operations, string value)
            {
                return Task.Factory.StartNew(s => ((IGenerateBarcode)s).UPCAAsync(value), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Validate and generate a UPC-A barcode as a PNG file, a type of 1D barcode
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='value'>
            /// UPC-A barcode value to generate from
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<System.IO.Stream> UPCAAsync(this IGenerateBarcode operations, string value, CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.UPCAWithHttpMessagesAsync(value, null, cancellationToken).ConfigureAwait(false);
                _result.Request.Dispose();
                return _result.Body;
            }

            /// <summary>
            /// Validates and generate a UPC-E barcode as a PNG file, a type of 1D barcode
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='value'>
            /// UPC-E barcode value to generate from
            /// </param>
            public static System.IO.Stream UPCE(this IGenerateBarcode operations, string value)
            {
                return Task.Factory.StartNew(s => ((IGenerateBarcode)s).UPCEAsync(value), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Validates and generate a UPC-E barcode as a PNG file, a type of 1D barcode
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='value'>
            /// UPC-E barcode value to generate from
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<System.IO.Stream> UPCEAsync(this IGenerateBarcode operations, string value, CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.UPCEWithHttpMessagesAsync(value, null, cancellationToken).ConfigureAwait(false);
                _result.Request.Dispose();
                return _result.Body;
            }

            /// <summary>
            /// Validates and generate a EAN-13 barcode as a PNG file, a type of 1D barcode
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='value'>
            /// Barcode value to generate from
            /// </param>
            public static System.IO.Stream EAN13(this IGenerateBarcode operations, string value)
            {
                return Task.Factory.StartNew(s => ((IGenerateBarcode)s).EAN13Async(value), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Validates and generate a EAN-13 barcode as a PNG file, a type of 1D barcode
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='value'>
            /// Barcode value to generate from
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<System.IO.Stream> EAN13Async(this IGenerateBarcode operations, string value, CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.EAN13WithHttpMessagesAsync(value, null, cancellationToken).ConfigureAwait(false);
                _result.Request.Dispose();
                return _result.Body;
            }

            /// <summary>
            /// Validates and generate a EAN-8 barcode as a PNG file, a type of 1D barcode
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='value'>
            /// Barcode value to generate from
            /// </param>
            public static System.IO.Stream EAN8(this IGenerateBarcode operations, string value)
            {
                return Task.Factory.StartNew(s => ((IGenerateBarcode)s).EAN8Async(value), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Validates and generate a EAN-8 barcode as a PNG file, a type of 1D barcode
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='value'>
            /// Barcode value to generate from
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<System.IO.Stream> EAN8Async(this IGenerateBarcode operations, string value, CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.EAN8WithHttpMessagesAsync(value, null, cancellationToken).ConfigureAwait(false);
                _result.Request.Dispose();
                return _result.Body;
            }

    }
}
