// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Cloudmersive
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for Domain.
    /// </summary>
    public static partial class DomainExtensions
    {
            /// <summary>
            /// Validate a domain name
            /// </summary>
            /// Check whether a domain name is valid or not.  API performs a live
            /// validation by contacting DNS services to validate the existence of the
            /// domain name.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='domain'>
            /// Domain name to check, for example "cloudmersive.com"
            /// </param>
            public static CheckOKResponse Check(this IDomain operations, string domain)
            {
                return Task.Factory.StartNew(s => ((IDomain)s).CheckAsync(domain), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Validate a domain name
            /// </summary>
            /// Check whether a domain name is valid or not.  API performs a live
            /// validation by contacting DNS services to validate the existence of the
            /// domain name.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='domain'>
            /// Domain name to check, for example "cloudmersive.com"
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CheckOKResponse> CheckAsync(this IDomain operations, string domain, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CheckWithHttpMessagesAsync(domain, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get WHOIS information for a domain
            /// </summary>
            /// Validate whether a domain name exists, and also return the full WHOIS
            /// record for that domain name.  WHOIS records include all the registration
            /// details of the domain name, such as information about the domain's owners.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='domain'>
            /// Domain name to check, for example "cloudmersive.com"
            /// </param>
            public static PostOKResponse Post(this IDomain operations, string domain)
            {
                return Task.Factory.StartNew(s => ((IDomain)s).PostAsync(domain), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get WHOIS information for a domain
            /// </summary>
            /// Validate whether a domain name exists, and also return the full WHOIS
            /// record for that domain name.  WHOIS records include all the registration
            /// details of the domain name, such as information about the domain's owners.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='domain'>
            /// Domain name to check, for example "cloudmersive.com"
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PostOKResponse> PostAsync(this IDomain operations, string domain, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostWithHttpMessagesAsync(domain, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
