// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Cloudmersive
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for ConvertData.
    /// </summary>
    public static partial class ConvertDataExtensions
    {
            /// <summary>
            /// CSV to JSON conversion
            /// </summary>
            /// Convert a CSV file to a JSON object array
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='inputFile'>
            /// Input file to perform the operation on.
            /// </param>
            public static object CsvToJson(this IConvertData operations, System.IO.Stream inputFile)
            {
                return Task.Factory.StartNew(s => ((IConvertData)s).CsvToJsonAsync(inputFile), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// CSV to JSON conversion
            /// </summary>
            /// Convert a CSV file to a JSON object array
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='inputFile'>
            /// Input file to perform the operation on.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CsvToJsonAsync(this IConvertData operations, System.IO.Stream inputFile, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CsvToJsonWithHttpMessagesAsync(inputFile, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// XML to JSON conversion
            /// </summary>
            /// Convert an XML string or file into JSON
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object XmlToJson(this IConvertData operations)
            {
                return Task.Factory.StartNew(s => ((IConvertData)s).XmlToJsonAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// XML to JSON conversion
            /// </summary>
            /// Convert an XML string or file into JSON
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> XmlToJsonAsync(this IConvertData operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.XmlToJsonWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
