// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Cloudmersive
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for ConvertWeb.
    /// </summary>
    public static partial class ConvertWebExtensions
    {
            /// <summary>
            /// Take screenshot of URL
            /// </summary>
            /// Fully renders a website and returns a PNG screenshot of the full page
            /// image.  Javascript, HTML5, CSS and other advanced features are all
            /// supported.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='input'>
            /// Screenshot request parameters
            /// </param>
            public static System.IO.Stream UrlToScreenshot(this IConvertWeb operations, Input input)
            {
                return Task.Factory.StartNew(s => ((IConvertWeb)s).UrlToScreenshotAsync(input), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Take screenshot of URL
            /// </summary>
            /// Fully renders a website and returns a PNG screenshot of the full page
            /// image.  Javascript, HTML5, CSS and other advanced features are all
            /// supported.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='input'>
            /// Screenshot request parameters
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<System.IO.Stream> UrlToScreenshotAsync(this IConvertWeb operations, Input input, CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.UrlToScreenshotWithHttpMessagesAsync(input, null, cancellationToken).ConfigureAwait(false);
                _result.Request.Dispose();
                return _result.Body;
            }

            /// <summary>
            /// Convert a URL to PDF
            /// </summary>
            /// Fully renders a website and returns a PDF of the full page.  Javascript,
            /// HTML5, CSS and other advanced features are all supported.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='input'>
            /// URL to PDF request parameters
            /// </param>
            public static System.IO.Stream UrlToPdf(this IConvertWeb operations, Input input)
            {
                return Task.Factory.StartNew(s => ((IConvertWeb)s).UrlToPdfAsync(input), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Convert a URL to PDF
            /// </summary>
            /// Fully renders a website and returns a PDF of the full page.  Javascript,
            /// HTML5, CSS and other advanced features are all supported.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='input'>
            /// URL to PDF request parameters
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<System.IO.Stream> UrlToPdfAsync(this IConvertWeb operations, Input input, CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.UrlToPdfWithHttpMessagesAsync(input, null, cancellationToken).ConfigureAwait(false);
                _result.Request.Dispose();
                return _result.Body;
            }

            /// <summary>
            /// Convert HTML string to PDF
            /// </summary>
            /// Fully renders a website and returns a PDF of the HTML.  Javascript, HTML5,
            /// CSS and other advanced features are all supported.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='input'>
            /// HTML to PDF request parameters
            /// </param>
            public static object HtmlToPdf(this IConvertWeb operations, Input input)
            {
                return Task.Factory.StartNew(s => ((IConvertWeb)s).HtmlToPdfAsync(input), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Convert HTML string to PDF
            /// </summary>
            /// Fully renders a website and returns a PDF of the HTML.  Javascript, HTML5,
            /// CSS and other advanced features are all supported.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='input'>
            /// HTML to PDF request parameters
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> HtmlToPdfAsync(this IConvertWeb operations, Input input, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.HtmlToPdfWithHttpMessagesAsync(input, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
