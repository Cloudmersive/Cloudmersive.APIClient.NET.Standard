// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Cloudmersive
{
    using System;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Domain operations.
    /// </summary>
    public partial interface IDomain
    {
        /// <summary>
        /// Validate a domain name
        /// </summary>
        /// Check whether a domain name is valid or not.  API performs a live
        /// validation by contacting DNS services to validate the existence
        /// of the domain name.
        /// <param name='domain'>
        /// Domain name to check, for example "cloudmersive.com"
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<CheckOKResponse>> CheckWithHttpMessagesAsync(string domain, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get WHOIS information for a domain
        /// </summary>
        /// Validate whether a domain name exists, and also return the full
        /// WHOIS record for that domain name.  WHOIS records include all the
        /// registration details of the domain name, such as information
        /// about the domain's owners.
        /// <param name='domain'>
        /// Domain name to check, for example "cloudmersive.com"
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<PostOKResponse>> PostWithHttpMessagesAsync(string domain, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
    }
}
