// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Cloudmersive
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for Email.
    /// </summary>
    public static partial class EmailExtensions
    {
            /// <summary>
            /// Validate email adddress for syntactic correctness only
            /// </summary>
            /// Validate whether a given email address is syntactically correct via a
            /// limited local-only check.  Use the address/full API to do a full
            /// validation.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='value'>
            /// Email address to validate, e.g. "support@cloudmersive.com"
            /// </param>
            public static PostOKResponse Post(this IEmail operations, string value)
            {
                return Task.Factory.StartNew(s => ((IEmail)s).PostAsync(value), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Validate email adddress for syntactic correctness only
            /// </summary>
            /// Validate whether a given email address is syntactically correct via a
            /// limited local-only check.  Use the address/full API to do a full
            /// validation.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='value'>
            /// Email address to validate, e.g. "support@cloudmersive.com"
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PostOKResponse> PostAsync(this IEmail operations, string value, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostWithHttpMessagesAsync(value, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Partially check whether an email address is valid
            /// </summary>
            /// Validate an email address by identifying whether its parent domain has
            /// email servers defined.  This call is less limited than syntaxOnly but not
            /// as comprehensive as address/full.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='email'>
            /// Email address to validate, e.g. "support@cloudmersive.com"
            /// </param>
            public static AddressGetServersOKResponse AddressGetServers(this IEmail operations, string email)
            {
                return Task.Factory.StartNew(s => ((IEmail)s).AddressGetServersAsync(email), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Partially check whether an email address is valid
            /// </summary>
            /// Validate an email address by identifying whether its parent domain has
            /// email servers defined.  This call is less limited than syntaxOnly but not
            /// as comprehensive as address/full.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='email'>
            /// Email address to validate, e.g. "support@cloudmersive.com"
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AddressGetServersOKResponse> AddressGetServersAsync(this IEmail operations, string email, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddressGetServersWithHttpMessagesAsync(email, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Fully validate an email address
            /// </summary>
            /// Performs a full validation of the email address.  Checks for syntactic
            /// correctness, identifies the mail server in question if any, and then
            /// contacts the email server to validate the existence of the account -
            /// without sending any emails.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='email'>
            /// Email address to validate, e.g. "support@cloudmersive.com"
            /// </param>
            public static FullValidationOKResponse FullValidation(this IEmail operations, string email)
            {
                return Task.Factory.StartNew(s => ((IEmail)s).FullValidationAsync(email), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Fully validate an email address
            /// </summary>
            /// Performs a full validation of the email address.  Checks for syntactic
            /// correctness, identifies the mail server in question if any, and then
            /// contacts the email server to validate the existence of the account -
            /// without sending any emails.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='email'>
            /// Email address to validate, e.g. "support@cloudmersive.com"
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<FullValidationOKResponse> FullValidationAsync(this IEmail operations, string email, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.FullValidationWithHttpMessagesAsync(email, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
